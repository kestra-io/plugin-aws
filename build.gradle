plugins {
    id "com.vanniktech.maven.publish" version "0.34.0"
    id "io.kestra.gradle.inject-bom-versions" version "1.0.0"
    id 'java-library'
    id "idea"
    id 'jacoco'
    id "com.adarshr.test-logger" version "4.0.0"
    id "com.gradleup.shadow" version "9.2.2"
    id 'signing'
    id "com.github.ben-manes.versions" version "0.53.0"
    id 'net.researchgate.release' version '3.1.0'
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    if (isBuildSnapshot) {
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
    }
}

final targetJavaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

group "io.kestra.plugin"
description 'AWS plugin for Kestra'


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

dependencies {
    // Platform
    annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    implementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // Lombok
    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"

    // Micronaut
    compileOnly "io.micronaut.reactor:micronaut-reactor"

    // Kestra
    annotationProcessor group: "io.kestra", name: "processor"
    compileOnly group: "io.kestra", name: "core"
    compileOnly group: "io.kestra", name: "script"

    // Logs
    compileOnly'org.slf4j:slf4j-api'

    // AWS libraries are managed by the the Kestra Platform so they are aligned on all plugins
    api 'software.amazon.awssdk:cloudwatchlogs'
    api 'software.amazon.awssdk:s3'
    api 'software.amazon.awssdk:s3-transfer-manager'
    api 'software.amazon.awssdk.crt:aws-crt'
    api 'software.amazon.awssdk:apache-client'
    api 'software.amazon.awssdk:dynamodb'
    api 'software.amazon.awssdk:sns'
    api 'software.amazon.awssdk:sqs'
    api 'software.amazon.awssdk:athena'
    api 'software.amazon.awssdk:lambda'
    api 'software.amazon.awssdk:eventbridge'
    api 'software.amazon.awssdk:kinesis'
    api 'software.amazon.awssdk:sts'
    api 'software.amazon.awssdk:ecr'
    api 'software.amazon.awssdk:netty-nio-client'
    api 'software.amazon.awssdk:emr'
    api 'software.amazon.awssdk:glue'
    api 'software.amazon.awssdk:cloudwatch'
}


/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()
}

testlogger {
    theme "mocha-parallel"
    showExceptions true
    showFullStackTraces true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams true
}

dependencies {
    // Platform
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"

    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut.reactor:micronaut-reactor"

    // test
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation 'org.mockito:mockito-inline:5.2.0'

    testAnnotationProcessor group: "io.kestra", name: "processor"
    testImplementation group: "io.kestra", name: "core"
    testImplementation group: "io.kestra", name: "tests"
    testImplementation group: "io.kestra", name: "script"
    testImplementation group: "io.kestra", name: "storage-local"
    testImplementation group: "io.kestra", name: "runner-memory"
    testImplementation group: "io.kestra", name: "repository-memory"
    testImplementation group: "io.kestra", name: "scheduler"
    testImplementation group: "io.kestra", name: "worker"

    // testcontainers
    testImplementation "org.testcontainers:testcontainers:2.0.1"
    testImplementation "org.testcontainers:junit-jupiter:1.21.3"
    testImplementation "org.testcontainers:localstack:1.21.3"
    testImplementation 'com.amazonaws:aws-java-sdk-s3'
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
dependencies {
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation "io.qameta.allure:allure-junit5"
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.24"
}

test {
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
    }
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
mavenPublishing {
    publishToMavenCentral(true)
    signAllPublications()
    coordinates("${project.group}", "${project.name}", "${project.version}")
    pom {
        name = "${project.name}"
        description = "${project.group}:${project.name}:${project.version}"
        url = "https://github.com/kestra-io/${project.name}"
        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        developers {
            developer {
                id = 'tchiotludo'
                name = 'Dehon'
                email = 'ldehon@kestra.io'
            }
        }
        scm {
            connection = 'scm:git:'
            url = "https://github.com/kestra-io/${project.name}"
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    // Suppression this validation error as we want to enforce the Kestra platform
    suppressedValidationErrors.add('enforced-platform')
}

jar {
    manifest {
        attributes(
                "X-Kestra-Name": project.name,
                "X-Kestra-Title": "AWS",
                "X-Kestra-Group": project.group + ".aws",
                "X-Kestra-Description": project.description,
                "X-Kestra-Version": project.version
        )
    }
}


shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
}



/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('main')
    }

    // Dynamically set properties with default values
    failOnSnapshotDependencies = (project.hasProperty('release.failOnSnapshotDependencies')
            ? project.property('release.failOnSnapshotDependencies').toBoolean()
            : true)
    pushReleaseVersionBranch = (project.hasProperty('release.pushReleaseVersionBranch')
            ? project.property('release.pushReleaseVersionBranch').toString()
            : null)
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
